/**
 * Public EMMA API
 * ### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d \'{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}\'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d \'{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}\'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { BadRequestError } from '../model/badRequestError';
import { ForbiddenError } from '../model/forbiddenError';
import { GetVmConfigs200Response } from '../model/getVmConfigs200Response';
import { UnauthorizedError } from '../model/unauthorizedError';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.emma.ms/external';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ComputeInstancesConfigurationsApiApiKeys {
}

export class ComputeInstancesConfigurationsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'bearerAuth': new HttpBearerAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ComputeInstancesConfigurationsApiApiKeys, value: string) {
        (this.authentications as any)[ComputeInstancesConfigurationsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.bearerAuth.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
     * @summary List of available configurations for Kubernetes cluster node
     * @param providerId ID of the cloud provider
     * @param locationId ID of the geographic location
     * @param dataCenterId ID of the cloud provider\&#39;s data center
     * @param vCpuType Type of vCPUs for the compute instance
     * @param vCpu virtual Central Processing Units (vCPUs) for the compute instance
     * @param vCpuMin Minimum number of vCPUs for the compute instance
     * @param vCpuMax Maximum number of vCPUs for the compute instance
     * @param ramGb RAM of the compute instance in gigabytes
     * @param ramGbMin Minimum RAM of the compute instance in gigabytes
     * @param ramGbMax Maximum RAM of the compute instance in gigabytes
     * @param volumeGb Volume size of the compute instance in gigabytes
     * @param volumeGbMin Minimum volume size of the compute instance in gigabytes
     * @param volumeGbMax Maximum volume size of the compute instance in gigabytes
     * @param volumeType Volume type of the compute instance
     * @param priceMin Minimum price of the compute instance
     * @param priceMax Maximum price of the compute instance
     * @param page Page number
     * @param size Query size
     */
    public async getKuberNodesConfigs (providerId?: number, locationId?: number, dataCenterId?: string, vCpuType?: 'shared' | 'standard' | 'hpc', vCpu?: number, vCpuMin?: number, vCpuMax?: number, ramGb?: number, ramGbMin?: number, ramGbMax?: number, volumeGb?: number, volumeGbMin?: number, volumeGbMax?: number, volumeType?: 'ssd' | 'ssd-plus', priceMin?: number, priceMax?: number, page?: number, size?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetVmConfigs200Response;  }> {
        const localVarPath = this.basePath + '/v1/kubernetes-configs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (providerId !== undefined) {
            localVarQueryParameters['providerId'] = ObjectSerializer.serialize(providerId, "number");
        }

        if (locationId !== undefined) {
            localVarQueryParameters['locationId'] = ObjectSerializer.serialize(locationId, "number");
        }

        if (dataCenterId !== undefined) {
            localVarQueryParameters['dataCenterId'] = ObjectSerializer.serialize(dataCenterId, "string");
        }

        if (vCpuType !== undefined) {
            localVarQueryParameters['vCpuType'] = ObjectSerializer.serialize(vCpuType, "'shared' | 'standard' | 'hpc'");
        }

        if (vCpu !== undefined) {
            localVarQueryParameters['vCpu'] = ObjectSerializer.serialize(vCpu, "number");
        }

        if (vCpuMin !== undefined) {
            localVarQueryParameters['vCpuMin'] = ObjectSerializer.serialize(vCpuMin, "number");
        }

        if (vCpuMax !== undefined) {
            localVarQueryParameters['vCpuMax'] = ObjectSerializer.serialize(vCpuMax, "number");
        }

        if (ramGb !== undefined) {
            localVarQueryParameters['ramGb'] = ObjectSerializer.serialize(ramGb, "number");
        }

        if (ramGbMin !== undefined) {
            localVarQueryParameters['ramGbMin'] = ObjectSerializer.serialize(ramGbMin, "number");
        }

        if (ramGbMax !== undefined) {
            localVarQueryParameters['ramGbMax'] = ObjectSerializer.serialize(ramGbMax, "number");
        }

        if (volumeGb !== undefined) {
            localVarQueryParameters['volumeGb'] = ObjectSerializer.serialize(volumeGb, "number");
        }

        if (volumeGbMin !== undefined) {
            localVarQueryParameters['volumeGbMin'] = ObjectSerializer.serialize(volumeGbMin, "number");
        }

        if (volumeGbMax !== undefined) {
            localVarQueryParameters['volumeGbMax'] = ObjectSerializer.serialize(volumeGbMax, "number");
        }

        if (volumeType !== undefined) {
            localVarQueryParameters['volumeType'] = ObjectSerializer.serialize(volumeType, "'ssd' | 'ssd-plus'");
        }

        if (priceMin !== undefined) {
            localVarQueryParameters['priceMin'] = ObjectSerializer.serialize(priceMin, "number");
        }

        if (priceMax !== undefined) {
            localVarQueryParameters['priceMax'] = ObjectSerializer.serialize(priceMax, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearerAuth.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearerAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetVmConfigs200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "GetVmConfigs200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
     * @summary List of available configurations for spot instance creation
     * @param providerId ID of the cloud provider
     * @param locationId ID of the geographic location
     * @param dataCenterId ID of the cloud provider\&#39;s data center
     * @param cloudNetworkType Type of cloud network
     * @param vCpuType Type of vCPUs for the compute instance
     * @param vCpu virtual Central Processing Units (vCPUs) for the compute instance
     * @param vCpuMin Minimum number of vCPUs for the compute instance
     * @param vCpuMax Maximum number of vCPUs for the compute instance
     * @param ramGb RAM of the compute instance in gigabytes
     * @param ramGbMin Minimum RAM of the compute instance in gigabytes
     * @param ramGbMax Maximum RAM of the compute instance in gigabytes
     * @param volumeGb Volume size of the compute instance in gigabytes
     * @param volumeGbMin Minimum volume size of the compute instance in gigabytes
     * @param volumeGbMax Maximum volume size of the compute instance in gigabytes
     * @param volumeType Volume type of the compute instance
     * @param priceMin Minimum price of the compute instance
     * @param priceMax Maximum price of the compute instance
     * @param page Page number
     * @param size Query size
     */
    public async getSpotConfigs (providerId?: number, locationId?: number, dataCenterId?: string, cloudNetworkType?: 'isolated' | 'multi-cloud' | 'default', vCpuType?: 'shared' | 'standard' | 'hpc', vCpu?: number, vCpuMin?: number, vCpuMax?: number, ramGb?: number, ramGbMin?: number, ramGbMax?: number, volumeGb?: number, volumeGbMin?: number, volumeGbMax?: number, volumeType?: 'ssd' | 'ssd-plus', priceMin?: number, priceMax?: number, page?: number, size?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetVmConfigs200Response;  }> {
        const localVarPath = this.basePath + '/v1/spots-configs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (providerId !== undefined) {
            localVarQueryParameters['providerId'] = ObjectSerializer.serialize(providerId, "number");
        }

        if (locationId !== undefined) {
            localVarQueryParameters['locationId'] = ObjectSerializer.serialize(locationId, "number");
        }

        if (dataCenterId !== undefined) {
            localVarQueryParameters['dataCenterId'] = ObjectSerializer.serialize(dataCenterId, "string");
        }

        if (cloudNetworkType !== undefined) {
            localVarQueryParameters['cloudNetworkType'] = ObjectSerializer.serialize(cloudNetworkType, "'isolated' | 'multi-cloud' | 'default'");
        }

        if (vCpuType !== undefined) {
            localVarQueryParameters['vCpuType'] = ObjectSerializer.serialize(vCpuType, "'shared' | 'standard' | 'hpc'");
        }

        if (vCpu !== undefined) {
            localVarQueryParameters['vCpu'] = ObjectSerializer.serialize(vCpu, "number");
        }

        if (vCpuMin !== undefined) {
            localVarQueryParameters['vCpuMin'] = ObjectSerializer.serialize(vCpuMin, "number");
        }

        if (vCpuMax !== undefined) {
            localVarQueryParameters['vCpuMax'] = ObjectSerializer.serialize(vCpuMax, "number");
        }

        if (ramGb !== undefined) {
            localVarQueryParameters['ramGb'] = ObjectSerializer.serialize(ramGb, "number");
        }

        if (ramGbMin !== undefined) {
            localVarQueryParameters['ramGbMin'] = ObjectSerializer.serialize(ramGbMin, "number");
        }

        if (ramGbMax !== undefined) {
            localVarQueryParameters['ramGbMax'] = ObjectSerializer.serialize(ramGbMax, "number");
        }

        if (volumeGb !== undefined) {
            localVarQueryParameters['volumeGb'] = ObjectSerializer.serialize(volumeGb, "number");
        }

        if (volumeGbMin !== undefined) {
            localVarQueryParameters['volumeGbMin'] = ObjectSerializer.serialize(volumeGbMin, "number");
        }

        if (volumeGbMax !== undefined) {
            localVarQueryParameters['volumeGbMax'] = ObjectSerializer.serialize(volumeGbMax, "number");
        }

        if (volumeType !== undefined) {
            localVarQueryParameters['volumeType'] = ObjectSerializer.serialize(volumeType, "'ssd' | 'ssd-plus'");
        }

        if (priceMin !== undefined) {
            localVarQueryParameters['priceMin'] = ObjectSerializer.serialize(priceMin, "number");
        }

        if (priceMax !== undefined) {
            localVarQueryParameters['priceMax'] = ObjectSerializer.serialize(priceMax, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearerAuth.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearerAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetVmConfigs200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "GetVmConfigs200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
     * @summary List of available configurations for virtual machine creation
     * @param providerId ID of the cloud provider
     * @param locationId ID of the geographic location
     * @param dataCenterId ID of the cloud provider\&#39;s data center
     * @param cloudNetworkType Type of cloud network
     * @param vCpuType Type of vCPUs for the compute instance
     * @param vCpu virtual Central Processing Units (vCPUs) for the compute instance
     * @param vCpuMin Minimum number of vCPUs for the compute instance
     * @param vCpuMax Maximum number of vCPUs for the compute instance
     * @param ramGb RAM of the compute instance in gigabytes
     * @param ramGbMin Minimum RAM of the compute instance in gigabytes
     * @param ramGbMax Maximum RAM of the compute instance in gigabytes
     * @param volumeGb Volume size of the compute instance in gigabytes
     * @param volumeGbMin Minimum volume size of the compute instance in gigabytes
     * @param volumeGbMax Maximum volume size of the compute instance in gigabytes
     * @param volumeType Volume type of the compute instance
     * @param priceMin Minimum price of the compute instance
     * @param priceMax Maximum price of the compute instance
     * @param page Page number
     * @param size Query size
     */
    public async getVmConfigs (providerId?: number, locationId?: number, dataCenterId?: string, cloudNetworkType?: 'isolated' | 'multi-cloud' | 'default', vCpuType?: 'shared' | 'standard' | 'hpc', vCpu?: number, vCpuMin?: number, vCpuMax?: number, ramGb?: number, ramGbMin?: number, ramGbMax?: number, volumeGb?: number, volumeGbMin?: number, volumeGbMax?: number, volumeType?: 'ssd' | 'ssd-plus', priceMin?: number, priceMax?: number, page?: number, size?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetVmConfigs200Response;  }> {
        const localVarPath = this.basePath + '/v1/vms-configs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (providerId !== undefined) {
            localVarQueryParameters['providerId'] = ObjectSerializer.serialize(providerId, "number");
        }

        if (locationId !== undefined) {
            localVarQueryParameters['locationId'] = ObjectSerializer.serialize(locationId, "number");
        }

        if (dataCenterId !== undefined) {
            localVarQueryParameters['dataCenterId'] = ObjectSerializer.serialize(dataCenterId, "string");
        }

        if (cloudNetworkType !== undefined) {
            localVarQueryParameters['cloudNetworkType'] = ObjectSerializer.serialize(cloudNetworkType, "'isolated' | 'multi-cloud' | 'default'");
        }

        if (vCpuType !== undefined) {
            localVarQueryParameters['vCpuType'] = ObjectSerializer.serialize(vCpuType, "'shared' | 'standard' | 'hpc'");
        }

        if (vCpu !== undefined) {
            localVarQueryParameters['vCpu'] = ObjectSerializer.serialize(vCpu, "number");
        }

        if (vCpuMin !== undefined) {
            localVarQueryParameters['vCpuMin'] = ObjectSerializer.serialize(vCpuMin, "number");
        }

        if (vCpuMax !== undefined) {
            localVarQueryParameters['vCpuMax'] = ObjectSerializer.serialize(vCpuMax, "number");
        }

        if (ramGb !== undefined) {
            localVarQueryParameters['ramGb'] = ObjectSerializer.serialize(ramGb, "number");
        }

        if (ramGbMin !== undefined) {
            localVarQueryParameters['ramGbMin'] = ObjectSerializer.serialize(ramGbMin, "number");
        }

        if (ramGbMax !== undefined) {
            localVarQueryParameters['ramGbMax'] = ObjectSerializer.serialize(ramGbMax, "number");
        }

        if (volumeGb !== undefined) {
            localVarQueryParameters['volumeGb'] = ObjectSerializer.serialize(volumeGb, "number");
        }

        if (volumeGbMin !== undefined) {
            localVarQueryParameters['volumeGbMin'] = ObjectSerializer.serialize(volumeGbMin, "number");
        }

        if (volumeGbMax !== undefined) {
            localVarQueryParameters['volumeGbMax'] = ObjectSerializer.serialize(volumeGbMax, "number");
        }

        if (volumeType !== undefined) {
            localVarQueryParameters['volumeType'] = ObjectSerializer.serialize(volumeType, "'ssd' | 'ssd-plus'");
        }

        if (priceMin !== undefined) {
            localVarQueryParameters['priceMin'] = ObjectSerializer.serialize(priceMin, "number");
        }

        if (priceMax !== undefined) {
            localVarQueryParameters['priceMax'] = ObjectSerializer.serialize(priceMax, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearerAuth.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearerAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetVmConfigs200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "GetVmConfigs200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
